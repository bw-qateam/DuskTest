name: CI
run-name: DuskTest ðŸš€
on: [push]
jobs:
 
  dusk-php:
    runs-on: ubuntu-latest
    env:
      APP_URL: "http://127.0.0.1:8000"
      DB_USERNAME: root
      DB_PASSWORD: root
      MAIL_MAILER: log
      DB_DATABASE: dusk
      DUSK_HEADLESS: true
#       TEST_VAR1: Testing 123
    steps:
      - uses: actions/checkout@v3
      - name: Prepare The Environment
        run: cp .env.example .env
      - name: Create Database
        run: |
          sudo systemctl start mysql
          mysql --user="root" --password="root" -e "CREATE DATABASE \`dusk\` character set UTF8mb4 collate utf8mb4_bin;"
      - name: Install Composer Dependencies
        run: composer install --no-progress --prefer-dist --optimize-autoloader
      - name: Generate Application Key
        run: php artisan key:generate
      - name: Install npm
        run: npm install
      - name: Upgrade Chrome Driver
        run: php artisan dusk:chrome-driver --detect
      - name: Ensure the ChromeDriver binaries are executable
        run: sudo chmod -R 0755 ./vendor/laravel/dusk/bin/
      - name: Start Chrome Driver
        run: ./vendor/laravel/dusk/bin/chromedriver-linux &
#       - name: Check Chrome version
#         run: /usr/bin/chromium-browser --version
#       - name: Check Laravel version
#         run: php artisan --version      
        
      - name: Install Firefox driver
        run: php artisan dusk:firefox-driver
#           '
      - name: Install breeze
        run: composer require laravel/breeze --dev
      - name: Install blade
        run: |
          php artisan breeze:install blade
      - name: DB Migrate
        run: php artisan migrate
      - name: Clear cache
        run: php artisan config:clear
      - name: Run Laravel Server
        run: php artisan serve --no-reload &
        
      - name: PHPUnit
        run: ./vendor/bin/phpunit --do-not-cache-result --testdox-html phpunit.html tests #--filter=LoginTest tests
      - name: Upload PHPUnit results
        uses: actions/upload-artifact@v3
        with:
          name: phpunit
          path: phpunit.html
      - name: Install PHPStan
        run: composer require --dev phpstan/phpstan
#       - name: PHPStan
#         uses: php-actions/phpstan@v3
#         with:
#          args: --memory-limit=1G --level=1 --no-progress --error-format=prettyJson tests
# #          args: --memory-limit=1G --level=1 --no-progress --error-format=prettyJson > reports/phpstan-report.json tests
# # #          path: ./tests
#          memory_limit: 1G
#          level: 1
#          error_format: github #raw, table, checkstyle, json, junit, prettyJson, gitlab, github, teamcity
      - name: Run PHPStan
        run: ./vendor/bin/phpstan analyse tests --memory-limit=1G --level=1 --no-progress --error-format=prettyJson > phpstan.json
# #       - name: Test env var
# #         run: echo "${{ env.TEST_VAR1 }} ${{ vars.TEST_VAR }}"
      - name: Upload PHPStan results
        uses: actions/upload-artifact@v3
        with:
          name: phpstan
          path: phpstan.json

#       - name: List down directory
#         run: ls
      - name: Run Dusk Tests
        run: sudo php artisan dusk:chrome #--filter LoginTest 
#       - name: Check file exists
#         run: test -e ./tests/Browser/source/Src_001.txt && echo file exists || echo file not found
#       - name: Page source
#         run: cat ./tests/Browser/source/Src_001.txt

      - name: Upload Screenshots
        #if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: screenshots
          path: tests/Browser/screenshots
      - name: Upload Console Logs
        #if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: console
          path: tests/Browser/console
#       - name: Check PHPUnit file exists
#         run: test -e ./vendor/bin/phpunit && echo file exists || echo file not found
      - name: Clear cache
        run: php artisan cache:clear
      - name: Artisan test
        run: php artisan test > pa_test.html
      - name: Upload Artisan Test
        #if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: artisan
          path: pa_test.html
        
        
        
        
        
        
        
          
      # BASIC API SCAN
      - name: ZAP API Scan
        uses: zaproxy/action-api-scan@v0.1.1
        with:
          target: |
            http://127.0.0.1:8000
#            https://minxpay.vercel.app/#/sign-in
#       - name: Create reports directory
#         run: mkdir reports
#       - name: List down directory
#         run: ls
#       - name: Rename ZAP API Report
#         run: mv zap_scan.zip reports/zap_scan_api.zip
#       - name: List down directory
#         run: ls
      - name: Upload ZAP API Report - HTML
        #if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: zap_api_html
          path: report_html.html #reports/zap_scan_api.zip
      - name: Upload ZAP API Report - MD
        #if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: zap_api_md
          path: report_md.md
#       - name: Upload ZAP API Report2
#         #if: failure()
#         uses: actions/upload-artifact@v3
#         with:
#           name: zap_api2
#           path: report_html.html
        
      # BASIC FULL SCAN
      - name: ZAP Full Scan
        uses: zaproxy/action-full-scan@v0.4.0
        with:
          target: |
            http://127.0.0.1:8000
#            https://minxpay.vercel.app/#/sign-in
            
#       - name: List down directory
#         run: ls
#       - name: Rename ZAP Full Report
#         run: mv zap_scan.zip reports/zap_scan_full.zip
#       - name: List down directory
#         run: ls
      - name: Upload ZAP Full Report - HTML
        #if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: zap_full_html
          path: report_html.html #reports/zap_scan_api.zip
      - name: Upload ZAP Full Report -MD
        #if: failure()
        uses: actions/upload-artifact@v3
        with:
          name: zap_full_md
          path: report_md.md
        
  
  
  
  
  
#   download:
#     runs-on: ubuntu-latest
#     needs: dusk-php
#     steps:
#       - name: Download screenshot
#         uses: actions/download-artifact@v3
#         with:
#           name: screenshots
  
#   owasp:      
#     runs-on: ubuntu-latest
#     needs: dusk-php
#     steps:
          
#   # ADVANCED FULL SCAN
#   zap_full_scan:
#     runs-on: ubuntu-latest
#     name: Scan the web application
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#         with:
#           ref: master
#       - name: ZAP Scan
#         uses: zaproxy/action-full-scan@v0.4.0
#         with:
#           token: ${{ secrets.OWASP_GITHUB_TOKEN }}
#           docker_name: 'owasp/zap2docker-stable'
#           target: 'https://www.zaproxy.org/'
#           rules_file_name: '.zap/rules.tsv'
#           cmd_options: '-a'
          
#   # ADVANCED API SCAN
#   zap_api_scan:
#     runs-on: ubuntu-latest
#     name: Scan the web application (API)
#     steps:
#       - name: Checkout
#         uses: actions/checkout@v2
#         with:
#           ref: master

#       - name: ZAP Scan
#         uses: zaproxy/action-api-scan@v0.1.1
#         with:
#           token: ${{ secrets.GITHUB_TOKEN }}
#           docker_name: 'owasp/zap2docker-stable'
#           format: openapi
#           target: 'https://www.zaproxy.org/'
#           rules_file_name: '.zap/rules.tsv'
#           cmd_options: '-a'
          
#   sonarqube:
#     name: SonarQube Trigger
#     runs-on: ubuntu-latest
#     needs: download
#     steps:
#     - name: Checking out
#       uses: actions/checkout@master
#       with:
#         # Disabling shallow clone is recommended for improving relevancy of reporting
#         fetch-depth: 0
#     - name: SonarQube Scan
#       uses: kitabisa/sonarqube-action@v1.2.0
#       with:
#         host: ${{ secrets.SONARQUBE_HOST }}
#         login: ${{ secrets.SONARQUBE_TOKEN }}
